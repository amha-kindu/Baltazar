#version 400 core

layout(location = 0)in vec3 position;
layout(location = 1)in vec3 normal;
layout(location = 2)in vec3 texCoord;

layout(location = 3)in vec3 tangent;

uniform mat4 model;
uniform mat4 projection;
uniform mat4 view;


out VS_OUT {
  vec2 fragTexCoord;
  vec3 fragPos;  //in World space coordinate system
  vec3 fragNormal;
  mat3 TBN;
} vs_out;

void main(){
  gl_Position = projection * view * model * vec4(position, 1.0f);
  vs_out.fragPos = vec3(model * vec4(position, 1.0f));
  vs_out.fragNormal = mat3(transpose(inverse(model))) * normal;
  vs_out.fragTexCoord = vec2(texCoord.x, texCoord.y);

  vec3 T = normalize(vec3(model * vec4(tangent,   0.0)));
  //vec3 B = normalize(vec3(model * vec4(bitangent, 0.0)));
  vec3 N = normalize(vec3(model * vec4(normal,    0.0)));

  T = normalize(T - dot(T, N) * N);
  // then retrieve perpendicular vector B with the cross product of T and N
  vec3 B = cross(T, N);
  
  vs_out.TBN = mat3(T, B, N);
}