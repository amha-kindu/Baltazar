#version 400 core

//Defining input types
struct Material {
  sampler2D diffuse_map;
  sampler2D specular_map;
  sampler2D normal_map;
  
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;

  float shininess;
  float IOR;
};

struct DirectionalLight {
  int lit;
  vec3 direction;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
struct PointLight {
  int lit;
  vec3 position;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;

  float constant;
  float linear;
  float quadratic;
};
struct SpotLight {
  int lit;
  PointLight pt;
  vec3 direction;
  float cutOff;
  float outerCutOff;
};

// Declaring inputs
uniform Material material;
uniform DirectionalLight dirLight;

#define NR_PT_LIGHTS 10
uniform PointLight pt_lights[NR_PT_LIGHTS];

uniform SpotLight sp_light;
uniform samplerCube skybox;

uniform vec3 camPos;

uniform float time;


in VS_OUT{
  vec2 fragTexCoord;
  vec3 fragPos;  //in World space coordinate system
  vec3 fragNormal;
  mat3 TBN;
} fs_in;

// Declaring output
out vec4 out_Color;


vec3 illuminate_frag(DirectionalLight dl, vec3 view_dir, vec3 normal);
vec3 illuminate_frag(PointLight pl, vec3 view_dir, vec3 normal, vec3 frag_pos);
vec3 illuminate_frag(SpotLight sl, vec3 view_dir, vec3 normal, vec3 frag_pos);


void main()
{
  vec3 viewDir = normalize(camPos - fs_in.fragPos);
  vec3 normal;
  
  normal = texture(material.normal_map, fs_in.fragTexCoord).rgb;
  //normal.b += 4*sin(4*time)+4.0;

  if(length(normal)!= 0){
    normal = normalize(normal*2.0 - 1.0);
    normal = normalize(fs_in.TBN * normal);
  }
  else{
    normal = normalize(fs_in.fragNormal);
  }
  
  vec3 frag_color = vec3(0.0, 0.0, 0.0);

  vec3 R = reflect(-viewDir, normal);
  //frag_color += vec3(texture(skybox, R));

  float ratio = 1.00 / material.IOR; // From Air-to-Object

  vec3 RefractionVector = refract(-viewDir, normal, ratio);
  //frag_color += 0.05*vec3(texture(skybox, RefractionVector));

  frag_color += illuminate_frag(dirLight, viewDir, normal);
  for(int i = 0; i < NR_PT_LIGHTS ; i++){
    frag_color += illuminate_frag(pt_lights[i], viewDir, normal, fs_in.fragPos);
  }
  frag_color += illuminate_frag(sp_light, viewDir, normal, fs_in.fragPos);

  // Handling transparency
  float opacity = max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.diffuse).w;
  if(opacity <= 0.1){
    discard;
  }
  else{
    out_Color = vec4(frag_color, 1.0);
  }
}

vec3 illuminate_frag(DirectionalLight dl, vec3 view_dir, vec3 norm){
    if(dl.lit != 1){
        return vec3(0.0f);
    }
  vec3 lightDir = normalize(-dl.direction);

  //Ambient
  float ambientStrength = 0.08f;
  
  //Diffuse
  float diff = max(dot(norm, lightDir), 0.0);

  //Specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float shininess;
  if(material.shininess <= 0.0f){
    shininess = 1.0f;
  }else{
    shininess = material.shininess;
  }
  float spec = pow(max(dot(view_dir, reflectDir), 0.0), shininess);

  vec3 ambient = ambientStrength * vec3(max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.ambient)) * dl.ambient;
  vec3 diffuse = diff * vec3(max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.diffuse)) * dl.diffuse;
  vec3 specular = spec * vec3(max(texture(material.specular_map, fs_in.fragTexCoord), material.specular)) * dl.specular;
  
  return ambient + diffuse + specular;
}

vec3 illuminate_frag(PointLight pl, vec3 view_dir, vec3 norm, vec3 frag_pos)
{
    if(pl.lit != 1){
        return vec3(0.0f);
    }
  float distance = length(frag_pos - pl.position);
  float attenuation = 1.0f / (pl.quadratic * distance * distance + pl.linear * distance + pl.constant);

  //Ambient
  float ambientStrength = 0.1f;
  
  //Diffuse
  vec3 lightDir = normalize(pl.position - frag_pos);
  float diff = max(dot(norm, lightDir), 0.0);

  //Specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float shininess;
  if(material.shininess <= 0){
    shininess = 1.0f;
  }else{
    shininess = material.shininess;
  }
  float spec = pow(max(dot(view_dir, reflectDir), 0.0), shininess);

  vec3 ambient = ambientStrength * vec3(max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.ambient)) * pl.ambient ;
  vec3 diffuse = diff * vec3(max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.diffuse)) * pl.diffuse;
  vec3 specular = spec * vec3(max(texture(material.specular_map, fs_in.fragTexCoord), material.specular)) * pl.specular; 
  return (ambient + diffuse + specular) * attenuation;
}

vec3 illuminate_frag(SpotLight sl, vec3 view_dir, vec3 norm, vec3 frag_pos)
{
    if(sl.lit != 1){
        return vec3(0.0f);
    }
  vec3 lightDir = normalize(sl.pt.position - frag_pos);

  // Sets up the spot light cone
  float theta = dot(lightDir, normalize(-sl.direction));
  float epsilon = sl.cutOff - sl.outerCutOff;
  float intensity = 1.0 - clamp((theta - sl.outerCutOff) / epsilon, 0.0, 1.0);

  float distance = length(frag_pos - sl.pt.position);
  float attenuation = 1.0f / (sl.pt.quadratic * distance * distance + sl.pt.linear * distance + sl.pt.constant);

  //Ambient
  float ambientStrength = 0.1f;
  
  //Diffuse
  float diff = max(dot(norm, lightDir), 0.0);

  //Specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float shininess;
  if(material.shininess <= 0){
    shininess = 1.0f;
  }else{
    shininess = material.shininess;
  }
  float spec = pow(max(dot(view_dir, reflectDir), 0.0), shininess);

  vec3 ambient = ambientStrength * vec3(max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.diffuse)) * sl.pt.ambient ;
  vec3 diffuse = diff * vec3(max(texture(material.diffuse_map, fs_in.fragTexCoord),  material.diffuse)) * sl.pt.diffuse;
  vec3 specular = spec * vec3(max(texture(material.specular_map, fs_in.fragTexCoord), material.specular)) * sl.pt.specular;
  return (ambient + (diffuse + specular)) * intensity * attenuation;
  
}
